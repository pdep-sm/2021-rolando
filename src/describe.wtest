import guerrero.*

const rolando = new Guerrero()
const espectroMalefico = new HechizoDeLogos()
const espadaDelDestino = new Arma(peso = 3)
const mascaraOscura = new Mascara(peso = 3)


describe "Tests de hechicería" {

	method initialize() {
		rolando.hechizoPreferido(espectroMalefico)
		espectroMalefico.nombre("espectro malefico")
	}

	test "El nivel de hechicería es 56 con espectro maléfico" {
		assert.equals(56, rolando.nivelDeHechiceria())
	}
	
	test "El nivel de hechicería es el valor de la fuerza oscura, con hechizo anónimo sin poder" {
		rolando.hechizoPreferido(object { method poder() = 0 } )
		assert.equals(fuerzaOscura.valor(), rolando.nivelDeHechiceria())
	}
	
	test "El nivel de hechicería es 125 con 'espectro superrecontramalefico muajajaja' " {
		espectroMalefico.nombre("espectro superrecontramalefico muajajaja")
		assert.equals(125, rolando.nivelDeHechiceria())
	}
	
	test "El nivel de hechicería es 61 con la ocurrencia de un eclipse" {
		fuerzaOscura.eclipse()
		assert.equals(61, rolando.nivelDeHechiceria())
	}
	
	test "Rolando es poderoso porque espectro maléfico" {
		assert.that(rolando.esPoderoso())
	}
	
	test "Rolando no es poderoso porque hechizo basico" {
		rolando.hechizoPreferido(hechizoBasico)
		assert.notThat(rolando.esPoderoso())
	}
	
}

describe "Tests de Lucha" {

	method initialize() {
		self.agregarTodosLosArtefactosBasicos()
	}
	
	method agregarTodosLosArtefactosBasicos() {
		rolando.agregarArtefacto(espadaDelDestino)
		rolando.agregarArtefacto(collarDivino)
		rolando.agregarArtefacto(mascaraOscura)
	}
	
	method collarCustom(cantidadDePerlas) {
		return object { method unidadesDeLucha(propietario) = cantidadDePerlas }
	}
	
	test "Rolando sin artefactos tiene nivel de lucha 1" {
		[espadaDelDestino, collarDivino, mascaraOscura].forEach{ artefacto => rolando.quitarArtefacto(artefacto)}
		assert.equals(1, rolando.valorDeLucha())
	}
	
	test "Rolando con todos los artefactos basicos es de 13" {
		assert.equals(13, rolando.valorDeLucha())
	}
	
	test "Rolando con todos los artefactos basicos c/collar divino de 3 perlas, es de 11" {
		collarDivino.cantidadDePerlas(3)
		assert.equals(11, rolando.valorDeLucha())
	}
	
	test "Rolando con valor base de lucha 8 y todos los artefactos basicos, es de 20" {
		rolando.valorBaseLucha(8)
		assert.equals(20, rolando.valorDeLucha())
	}
	
	test "Rolando con todos los artefactos basicos, menos mascara, es de 9" {
		rolando.quitarArtefacto(mascaraOscura)
		assert.equals(9, rolando.valorDeLucha())
	}
	
	test "Rolando con todos los artefactos basicos, y un collar nuevo de 2 perlas, es de 15" {
		rolando.agregarArtefacto(self.collarCustom(2))
		assert.equals(15, rolando.valorDeLucha())
	}
	
}

describe "Mascara Oscura" {
	
	test "Tiene 5 unidades de lucha para Rolando luego del eclipse" {
		fuerzaOscura.eclipse()
		assert.equals(5, mascaraOscura.unidadesDeLucha(rolando))
	}
}

describe "Lucha y Hechicería avanzada" {
	
	const armadura = new Armadura(peso = 10)
	
	method initialize() {
		self.agregarTodosLosArtefactosBasicos()
	}
	
	method agregarTodosLosArtefactosBasicos() {
		rolando.agregarArtefacto(espadaDelDestino)
		rolando.agregarArtefacto(collarDivino)
		rolando.agregarArtefacto(mascaraOscura)
		rolando.agregarArtefacto(armadura)
		rolando.agregarArtefacto(espejoFantastico)
		armadura.refuerzo(refuerzoNulo)
	}
	
	test "El valor de lucha de Rolando con todos los artefactos básicos es de 20" {
		assert.equals(20, rolando.valorDeLucha())
	}
	
	test "El valor de lucha de Rolando sólo con el espejo es 1" {
		rolando.quitarArtefacto(espadaDelDestino)
		rolando.quitarArtefacto(collarDivino)
		rolando.quitarArtefacto(mascaraOscura)
		rolando.quitarArtefacto(armadura)
		assert.equals(1, rolando.valorDeLucha())
	}
}


describe "Pesos de artefactos" {
	
	const espadaVieja = new Arma(peso = 7, fechaDeCompra = new Date(day = 7, month = 5, year = 2006))
	const espadaNueva = new Arma(peso = 4)
	const espadaComun = new Arma(peso = 5, fechaDeCompra = new Date().minusDays(500)) 
	const mascaraClara = new Mascara(indiceDeOscuridad = 0, peso = 2)
	const armaduraConCota = new Armadura(refuerzo = new CotaDeMalla(), peso = 10)
	const armaduraHechizoPar = new Armadura(refuerzo = new RefuerzoHechizo( hechizo = new HechizoComercial(porcentaje=0)), peso = 12)
	const armaduraHechizoImpar = new Armadura(refuerzo = new RefuerzoHechizo( hechizo = new HechizoDeLogos(nombre = "claro")), peso = 12)
	

	
	test "Peso de espada vieja es de 6kg ( 7 - 1 de corrección)" {
		assert.equals(6, espadaVieja.pesoTotal())
	}
	
	test "Peso de espada nueva de 4kg" {
		assert.equals(4, espadaNueva.pesoTotal())
	}
	
	test "Peso de espada común de 5kg (de 50 días) y su peso total es de 4.5kg" {
		assert.equals(4.5, espadaComun.pesoTotal())
	}
	
	test "Peso de máscara oscura de 3kg (y poder minimo 4) con peso total de 4kg" {
		assert.equals(4, mascaraOscura.pesoTotal())
	}
	
	test "Peso de máscara oscura de 3kg (y poder minimo 4) luego de ocurrido un eclipse, con peso total de 5kg" {
		fuerzaOscura.eclipse()
		assert.equals(5, mascaraOscura.pesoTotal())
	}
	
	test "Peso de máscara clara de 2kg (y poder minimo 4) con peso total de 3kg" {
		assert.equals(3, mascaraClara.pesoTotal())
	}
	
	test "Armadura con Cota de malla pesa 11kg" {
		assert.equals(11, armaduraConCota.pesoTotal())
	}
	
	test "Armadura con peso 12 y hechizo par, tiene peso total 14" {
		assert.equals(14, armaduraHechizoPar.pesoTotal())
	}
	
	test "Armadura con peso 12 y hechizo impar, tiene peso total 13" {
		assert.equals(13, armaduraHechizoImpar.pesoTotal())
	}
}

describe "NPCs" {
	const navi = new NPC(nivel = facil)
	const ashleyGraham = new NPC(nivel = moderado, valorBaseLucha = 5, artefactos = [mascaraOscura])
	
	test "Navi tiene valor de lucha 1" {
		assert.equals(1, navi.valorDeLucha())
	}
	
	test "Ashley Graham tiene valor de lucha 18" {
		assert.equals(18, ashleyGraham.valorDeLucha())
	}
	
	test "Ashley Graham cambia la dificultad y su valor de lucha es de 36" {
		ashleyGraham.nivel(dificil)
		assert.equals(36, ashleyGraham.valorDeLucha())
	}
	
}





















